#include <bits/stdc++.h>
using namespace std;
int idx=0;

struct node{
    int data;
    struct node* left, *right;
}*root=NULL;
struct node* getnew(int data)
{
    struct node* temp=new node;
    temp->data=data;
    temp->left=temp->right=NULL;
    return temp;
}
int search(int in[], int lo, int hi, int data)
{
    int s;
    for(int i=lo;i<=hi;i++)
    {
        if(in[i]==data)
        {
            s=i;
            break;
        }
    }
    return s;


}

struct node* buildhelper(int pre[], int in[], int inlo, int inhi, unordered_map<int, int> &mp)
{
    static int idx = 0;
    if(inlo > inhi)
        return NULL;
    struct node* t=getnew(pre[idx++]);
    //int s=search(in, inlo, inhi, t->data);
    auto it=mp.find(t->data);
    int s = it->second;

    t->left=buildhelper(pre, in, inlo, s-1, mp);
    t->right= buildhelper(pre, in, s+1, inhi, mp);
    return t;
}
int post(struct node* root, int pos[], int index)
{
    if(root==NULL)
        return index;
    index=post( root->left, pos, index);
    index=post( root->right, pos, index);
    if(root->data==pos[index])
        index++;
    else
        return -1;

    return index;
}
int main()
{
    int in[]={7 ,9  ,2 ,5 ,1 ,3 ,6 ,8};
    int pre[]={1 ,2  ,7 ,9 ,5 ,3 ,6 ,8};
    int pos[]={9,7  ,5 ,2 ,8 ,6 ,3 ,1};
    int len = sizeof(in)/sizeof(in[0]);

    unordered_map<int, int> mp;
    for(int i=0;i<len;i++)
    {
        mp[in[i]]=i;
    }
    root=buildhelper(pre, in, 0, len-1, mp );
    int index=post( root,pos, 0);
    //cout<<index;
    if(len==index)
        cout<<"yes";
    else
        cout<<"No";
}
