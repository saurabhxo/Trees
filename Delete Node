#include <bits/stdc++.h>
using namespace std;
struct node
{
    int data;
    struct node* left;
    struct node* right;
    
}*root=NULL;
struct node* GetNewNood(int data)
{
    struct node* temp= new node;
    temp->data=data;
    temp->left=temp->right=NULL;
    return temp;
}
struct node* Insert(struct node* root, int data)
{
 if(root==NULL)
 root=GetNewNood( data);
 else if(data<root->data)
 {
     root->left=Insert(root->left,data);
 }
 else{
     root->right=Insert(root->right, data);
 }
 return root;
}
struct node* findmin(struct node* root)
{
    if(root==NULL)
        return NULL;
        else if(root->left!=NULL)
            {
                findmin(root->left);
            }
            else if(root->left==NULL)
            {
                return root;
            }
}

struct node* delet(struct node* root, int data)
{
    if(root==NULL)
    return NULL;
    else if(data<root->data)
    {
        root->left=delet(root->left,data);
    }
    else if(data>root->data)
    {
        root->right=delet(root->right,data);
    }
    else
    {
        if(root->left==NULL && root->right==NULL)
        {
            delete root;
            root=NULL;
        }
        else if(root->left==NULL)
        {
            struct node* temp=root;
            root=root->right;
            delete temp;
        }
        else if(root->right==NULL)
        {
            struct node* temp=root;
            root=root->left;
            delete temp;
        }
        else
        {
            struct node* temp= findmin(root->right);
            root->data=temp->data;
            delet(root->right,temp->data);
        }
       
    }
     return root;
}
void inorder(struct node* root)
{
    if(root==NULL)
    return;
     inorder(root->left);
     cout<<root->data<<" ";
     inorder(root->right);
}
int main() 
{
    root=Insert(root,15);
    root=Insert(root,10);
    root=Insert(root,20);
    root=Insert(root,8);
    root=Insert(root,12);
    root=Insert(root,18);
    root=Insert(root,25);
    delet(root,12);
    inorder(root);
	return 0;
}
