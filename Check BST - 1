#include <bits/stdc++.h>
using namespace std;
struct node
{
    int data;
    struct node* left;
    struct node* right;
}*root=NULL;
struct node* Getnewnode(int data )
{
    struct node* newnode= new node;
    newnode->data=data;
    newnode->left=newnode->right=NULL;
    return newnode;
    
}
struct node* Insert(struct node* root, int data)
{
    if(root==NULL)
    {
        root=Getnewnode(data);
    }
    
    else if(data<=root->data)
    {
        root->left= Insert(root->left,data);
    }
    else
    {
        root->right= Insert(root->right,data);
    }
    return root;
}
bool SubtreeLesser(struct node* root, int value)
{
    if(root==NULL)
    return 1;
    if(root->data<value && SubtreeLesser(root->left,value) && SubtreeLesser(root->right,value))
    return 1;
    else
        return 0;
}
bool SubtreeGreater(struct node* root, int value)
{
    if(root== NULL)
    return 1;
    if(root->data > value && SubtreeGreater(root->left, value) && SubtreeGreater(root->right, value))
    return 1;
    else 
    
        return 0;
    
}
int Isbinary (struct node* root)
{
    if(root==NULL)
    return 1;
    if(SubtreeLesser(root->left,root->data) && SubtreeGreater(root->right, root->data)
    && Isbinary(root->left) && Isbinary(root->right))
    return 1;
    else
    return 0;
    
}
int main()
{
    root=Insert(root,50);
    root=Insert(root,30);
    root=Insert(root,70);
    root=Insert(root,20);
    root=Insert(root,40);
    root=Insert(root,60);
    root=Insert(root,80);
   if(Isbinary(root)==1)
    cout<<"Yes this is a binary Search Tree;";
    else
    cout<<"NOt";
    return 0;
}
